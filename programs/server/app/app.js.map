{"version":3,"sources":["meteor://ðŸ’»app/imports/api/collections/user_info/compensation/benefitDetails.js","meteor://ðŸ’»app/imports/api/collections/user_info/compensation/benefitsInKind.js","meteor://ðŸ’»app/imports/api/collections/user_info/compensation/bonusDetails.js","meteor://ðŸ’»app/imports/api/collections/user_info/compensation/salary.js","meteor://ðŸ’»app/imports/api/collections/user_info/bankInfo.js","meteor://ðŸ’»app/imports/api/collections/user_info/contact.js","meteor://ðŸ’»app/imports/api/collections/user_info/education.js","meteor://ðŸ’»app/imports/api/collections/user_info/employeeIds.js","meteor://ðŸ’»app/imports/api/collections/user_info/job.js","meteor://ðŸ’»app/imports/api/collections/user_info/personalInformation.js","meteor://ðŸ’»app/imports/api/collections/user_info/personalSettings.js","meteor://ðŸ’»app/imports/api/collections/user_info/summary.js","meteor://ðŸ’»app/imports/api/collections/absence.js","meteor://ðŸ’»app/imports/api/collections/absenceTypes.js","meteor://ðŸ’»app/imports/api/collections/announcements.js","meteor://ðŸ’»app/imports/api/collections/benefitTypes.js","meteor://ðŸ’»app/imports/api/collections/benefitsInKindTypes.js","meteor://ðŸ’»app/imports/api/collections/businesses.js","meteor://ðŸ’»app/imports/api/collections/companyDetails.js","meteor://ðŸ’»app/imports/api/collections/contentPages.js","meteor://ðŸ’»app/imports/api/collections/countries.js","meteor://ðŸ’»app/imports/api/collections/currencies.js","meteor://ðŸ’»app/imports/api/collections/departments.js","meteor://ðŸ’»app/imports/api/collections/employmentTypes.js","meteor://ðŸ’»app/imports/api/collections/holiday.js","meteor://ðŸ’»app/imports/api/collections/holidayDates.js","meteor://ðŸ’»app/imports/api/collections/hrDocuments.js","meteor://ðŸ’»app/imports/api/collections/hrPolicies.js","meteor://ðŸ’»app/imports/api/collections/images.js","meteor://ðŸ’»app/imports/api/collections/managementRoles.js","meteor://ðŸ’»app/imports/api/collections/nationalities.js","meteor://ðŸ’»app/imports/api/collections/secretQuestions.js","meteor://ðŸ’»app/imports/api/collections/tasks.js","meteor://ðŸ’»app/imports/api/collections/teams.js","meteor://ðŸ’»app/imports/api/collections/workingPatterns.js","meteor://ðŸ’»app/imports/api/server/publications.js","meteor://ðŸ’»app/imports/api/methods.js","meteor://ðŸ’»app/imports/startup/both/index.js","meteor://ðŸ’»app/imports/startup/server/accounts.js","meteor://ðŸ’»app/imports/startup/server/fixtures.js","meteor://ðŸ’»app/imports/startup/server/index.js","meteor://ðŸ’»app/imports/startup/server/register-api.js","meteor://ðŸ’»app/server/main.js"],"names":["Mongo","module","watch","require","v","SimpleSchema","BenefitDetails","Collection","BenefitDetailsSchema","userId","String","benefitType","startDate","Date","endDate","value","Number","frequency","attachSchema","exportDefault","BenefitsInKind","BenefitInKindSchema","BonusDetails","BonusDetailsSchema","date","amount","currency","Salary","SalarySchema","type","optional","businessId","effectiveDate","salary","notes","BankInfo","BankInfoSchema","accountNumber","sortCode","accountName","bankName","IBAN","Swift","BIC","bankAddress","Object","Contact","ContactSchema","name","defaultValue","relationship","telephone","email","Education","EducationSchema","institutionName","qualifications","export","EmployeeIdsStore","LocalStore","UploadFS","EmployeeIds","collection","path","process","env","UPLOADFS_STORE_PATH","mode","writeMode","permissions","StorePermissions","insert","doc","update","remove","Job","JobSchema","title","isManager","Boolean","employeeType","department","team","probationEndDate","lengthOfService","terminationDate","annualLeaveEntitlement","workPermit","dateOfExpiry","workingPattern","access","disability","PersonalInformation","PersonalInformationSchema","middleName","address","city","country","postcode","mobile","maritalStatus","nationality","dateOfBirth","PersonalSettings","PersonalSettingsSchema","holidayEmails","companyUpdatesEmails","newTasksEmails","Summary","SummarySchema","firstName","surname","employeeId","manager","location","linkedin","twitter","facebook","photo","bio","moment","Absence","AbsenceSchema","employee","autoValue","field","milliseconds","seconds","minutes","hours","toDate","absenceType","AbsenceTypes","AbsenceTypeSchema","sicknessIdentifier","selfCertification","Announcements","AnnouncementsSchema","detail","mandatory","business","readBy","Array","deletedFor","BenefitTypes","BenefitTypeSchema","BenefitsInKindTypes","Businesses","BusinessSchema","employeesCount","allowedValues","webAddress","contactName","price","paymentFrequency","status","bank","CompanyDetails","CompanyDetaislSchema","holidaysToCarry","monthsBeforeAlerts","defaultCurrency","defaultProbationWeeks","taskAlerts1","taskAlerts2","taskAlerts3","ContentPages","ContentPagesSchema","summary","article","isActive","visibleFor","order","Countries","Currencies","CurrencySchema","Departments","DepartmentSchema","EmploymentTypes","EmploymentTypeSchema","Holiday","HolidaySchema","approvedBy","createdAt","cancelledDate","cancelReason","isInsert","duration","HolidayDates","HolidayDatesSchema","holidayType","HRDocumentsStore","HRDocuments","HRPolicies","HRPoliciesSchema","details","ImagesStore","Images","ManagerPermissions","ManagerPermissionsSchema","jobEdit","compensationEdit","hrDocumentsEdit","jobView","compensationView","hrDocumentsView","Nationalities","SecretQuestions","SecretQuestionsSchema","text","active","inputType","Tasks","TasksSchema","absence","holiday","expiryDate","isComplete","taskType","users","Teams","TeamSchema","WorkingPatterns","WorkingPatternsSchema","weekHours","Meteor","publish","find","user","profile","sort","$ne","_id","$in","roles","fields","newUserId","usersInBusiness","map","concat","managersInBusiness","job","console","log","count","managerIds","jobDoc","yearStart","month","yearEnd","year","getFullYear","$or","$gte","$lt","Roles","userIsInRole","managerId","findOne","Random","Accounts","Email","getEmployeeId","mailjet","Npm","connect","mongoCallback","error","result","invalidKeys","length","Error","sendEmail","to","subject","html","request","post","then","response","catch","methods","$set","heartbeat","now","updatedAbsenceType","updatedTeam","updatedCurrency","employmentType","updatedEmploymentType","updatedBenefitType","benefitInKindType","updatedBenefitInKindType","updatedDepartment","momentStartDate","announcement","momentEndDate","isSameOrAfter","updatedAnnouncement","$push","indexOf","lastContentPage","contentPage","updatedContentPage","$inc","lastHrPolicy","policy","updatedPolicy","emailExists","forEach","createUser","password","role","updatedBusiness","updatedWorkingPattern","$unset","policies","lastPolicy","tmp","updatedHoliday","updatedDate","updatedDetails","ids","settings","updatedSettings","upsert","updatedSummary","personalInformation","updatedPersonalInformation","token","secret","signupToken","url","absoluteUrl","emailHTML","educations","e","isNew","education","updatedJob","err","res","updatedSalary","bonusDetails","updatedBonusDetails","benefitDetail","updatedBenefitDetails","benefitInKind","updatedBenefitInKind","bankInfo","updatedBankInfo","contacts","c","contact","managers","absences","$lte","fetch","requiresSelfCertification","selfCertificationTask","employeeEmail","emails","hrReminderTask","fullName","hrEmail","updatedAbsence","initialAbsence","taskId","usersInTeam","sicknessAbsenceTypes","totalDays","diff","$nin","filter","absencesCount","holidayDates","query","$and","filters","teamUserIds","push","typeIds","employeeSummary","userJob","holidayDate","isDateWorkingDay","isSame","dayIndex","getDay","setDate","getDate","managerTask","format","managerEmail","holidayId","totalHolidayRequested","reduce","a","b","holidayEntitlement","daysTaken","userInfo","position","profilePic","queryArr","split","expressions","RegExp","item","mongoQuery","exp","jobTitle","userSecretQuestions","secretQuestions","question","questionId","questions","i","randomIndex","Math","floor","random","splice","setPassword","emailHtml","newPassword","regex","test","userQuestion","answer","toLowerCase","trim","managerPermissions","onCreateUser","options","personalSettings","increment","slice","countries","nationalities","getAllRoles","createRole","startup","sessionPurgeInterval","inactivityTimeout","setInterval","overdueTimestamp","multi","config","storesPath"],"mappings":"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","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst BenefitDetails = new Mongo.Collection('userBenefitDetails');\n\nBenefitDetailsSchema = new SimpleSchema({\n    userId: String,\n    benefitType: String,\n    startDate: Date,\n    endDate: Date,\n    value: Number,\n    frequency: String\n});\n\nBenefitDetails.attachSchema(BenefitDetailsSchema);\n\nexport default BenefitDetails;","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst BenefitsInKind = new Mongo.Collection('userBenefitsInKind');\n\nBenefitInKindSchema = new SimpleSchema({\n    userId: String,\n    benefitType: String,\n    startDate: Date,\n    endDate: Date,\n    value: Number,\n    frequency: String\n});\n\nBenefitsInKind.attachSchema(BenefitInKindSchema);\n\nexport default BenefitsInKind;","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst BonusDetails = new Mongo.Collection('userBonusDetails');\n\nBonusDetailsSchema = new SimpleSchema({\n    userId: String,\n    date: Date,\n    amount: Number,\n    currency: String\n});\n\nBonusDetails.attachSchema(BonusDetailsSchema);\n\nexport default BonusDetails;","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst Salary = new Mongo.Collection('userSalary');\n\nSalarySchema = new SimpleSchema({\n    userId: { type: String, optional: true },\n    businessId: { type: String, optional: true },\n    effectiveDate: Date,\n    salary: Number,\n    frequency: String,\n    currency: String,\n    notes: String\n});\n\nSalary.attachSchema(SalarySchema);\n\nexport default Salary;","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst BankInfo = new Mongo.Collection('userBankInfo');\n\nBankInfoSchema = new SimpleSchema({\n    userId: { type: String, optional: true },\n    businessId: { type: String, optional: true },\n    accountNumber: { type: String, optional: true },\n    sortCode: { type: String, optional: true },\n    accountName: { type: String, optional: true },\n    bankName: { type: String, optional: true },\n    IBAN: { type: String, optional: true },\n    Swift: { type: String, optional: true },\n    BIC: { type: String, optional: true },\n    bankAddress: { type: Object, optional: true },\n    'bankAddress.line1': { type: String, optional: true },\n    'bankAddress.line2': { type: String, optional: true },\n    'bankAddress.city': { type: String, optional: true },\n    'bankAddress.country': { type: String, optional: true },\n    'bankAddress.postcode': { type: String, optional: true },\n    'bankAddress.taxCode': { type: String, optional: true }\n});\n\nBankInfo.attachSchema(BankInfoSchema);\n\nexport default BankInfo;","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst Contact = new Mongo.Collection('userContact');\n\nContactSchema = new SimpleSchema({\n    userId: { type: String, optional: true },\n    businessId: { type: String, optional: true },\n    name: { type: String, defaultValue: '' },\n    relationship: { type: String, optional: true },\n    telephone: { type: String, optional: true },\n    email: { type: String, defaultValue: '' }\n});\n\nContact.attachSchema(ContactSchema);\n\nexport default Contact;","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst Education = new Mongo.Collection('userEducation');\n\nEducationSchema = new SimpleSchema({\n    userId: { type: String, optional: true },\n    businessId: { type: String, optional: true },\n    institutionName: String,\n    startDate: Date,\n    endDate: Date,\n    qualifications: String\n});\n\nEducation.attachSchema(EducationSchema);\n\nexport default Education;","import { Mongo } from 'meteor/mongo';\nimport { LocalStore } from 'meteor/jalik:ufs-local';\nimport { UploadFS } from 'meteor/jalik:ufs';\n\nconst EmployeeIds = new Mongo.Collection('employeeIds');\n\nexport const EmployeeIdsStore = new LocalStore({\n    collection: EmployeeIds,\n    name: 'employeeIds',\n    path: process.env.UPLOADFS_STORE_PATH + '/employeeIds',\n    mode: '0755',\n    writeMode: '0755',\n    permissions: new UploadFS.StorePermissions({\n        insert(userId, doc) {\n            return true;\n        },\n        update(userId, doc) {\n            return true;\n        },\n        remove(userId, doc) {\n            return true;\n        }\n    })\n});\n\nexport default EmployeeIds;","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst Job = new Mongo.Collection('userJob');\n\nJobSchema = new SimpleSchema({\n    userId: { type: String, optional: true },\n    businessId: { type: String, optional: true },\n    title: { type: String, optional: true },\n    isManager: { type: Boolean, optional: true },\n    employeeType: { type: String, optional: true },\n    department: { type: String, optional: true },\n    team: { type: Object, optional: true },\n    'team._id': { type: String, optional: true },\n    'team.name': { type: String, optional: true },\n    startDate: { type: Date, defaultValue: new Date(0) },\n    probationEndDate: { type: Date, defaultValue: new Date(0) },\n    lengthOfService: { type: String, optional: true },\n    terminationDate: { type: Date, defaultValue: new Date(0) },\n    annualLeaveEntitlement: { type: Number, defaultValue: 1, optional: true },\n    workPermit: { type: Boolean, optional: true },\n    dateOfExpiry: { type: Date, defaultValue: new Date(0) },\n    workingPattern: { type: Object, optional: true },\n    'workingPattern._id': String,\n    'workingPattern.name': String,\n    access: { type: String, optional: true },\n    disability: { type: String, optional: true }\n});\n\nJob.attachSchema(JobSchema);\n\nexport default Job;","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst PersonalInformation = new Mongo.Collection('personalInformation');\n\nPersonalInformationSchema = new SimpleSchema({\n    userId: { type: String },\n    middleName: { type: String, optional: true },\n    address: { type: String, optional: true },\n    city: { type: String, optional: true },\n    country: { type: String, optional: true },\n    postcode: { type: String, optional: true },\n    email: { type: String, optional: true },\n    mobile: { type: String, optional: true },\n    maritalStatus: { type: String, optional: true },\n    nationality: { type: String, optional: true },\n    dateOfBirth: { type: Date, defaultValue: new Date(0) },\n});\n\nPersonalInformation.attachSchema(PersonalInformationSchema);\n\nexport default PersonalInformation;","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst PersonalSettings = new Mongo.Collection('personalSettings');\n\nPersonalSettingsSchema = new SimpleSchema({\n    userId: { type: String, optional: true },\n    businessId: { type: String, optional: true },\n    holidayEmails: { type: Boolean, defaultValue: true },\n    companyUpdatesEmails: { type: Boolean, defaultValue: true },\n    newTasksEmails: { type: Boolean, defaultValue: true }\n});\n\nPersonalSettings.attachSchema(PersonalSettingsSchema);\n\nexport default PersonalSettings;","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst Summary = new Mongo.Collection('userSummary');\n\nSummarySchema = new SimpleSchema({\n    userId: { type: String, optional: true },\n    businessId: { type: String, optional: true },\n    firstName: { type: String, defaultValue: '' },\n    surname: { type: String, defaultValue: '' },\n    employeeId: { type: String, defaultValue: '' },\n    manager: { type: String, defaultValue: '' },\n    email: { type: String, defaultValue: '' },\n    location: { type: String, defaultValue: '', optional: true },\n    telephone: { type: String, defaultValue: '', optional: true },\n    mobile: { type: String, defaultValue: '', optional: true },\n    linkedin: { type: String, defaultValue: '', optional: true },\n    twitter: { type: String, defaultValue: '', optional: true },\n    facebook: { type: String, defaultValue: '', optional: true },\n    photo: { type: String, optional: true },\n    bio: { type: String, defaultValue: '', optional: true }\n});\n\nSummary.attachSchema(SummarySchema);\n\nexport default Summary;","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\nimport moment from 'moment';\n\nconst Absence = new Mongo.Collection('absence');\n\nAbsenceSchema = new SimpleSchema({\n    employee: Object,\n    'employee._id': String,\n    'employee.fullName': String,\n    startDate: Date,\n    endDate: { \n        type: Date, \n        optional: true, \n        autoValue: function () {\n            let endDate = this.field('endDate').value;\n\n            return endDate && moment(endDate).milliseconds(999).seconds(59).minutes(59).hours(23).toDate();\n        },\n    },\n    absenceType: Object,\n    'absenceType._id': String,\n    'absenceType.name': String,\n    notes: { type: String, optional: true },\n});\n\nAbsence.attachSchema(AbsenceSchema);\n\nexport default Absence;","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst AbsenceTypes = new Mongo.Collection('absenceTypes');\n\nAbsenceTypeSchema = new SimpleSchema({\n    type: String,\n    sicknessIdentifier: Boolean,\n    selfCertification: Boolean,\n    businessId: String,\n});\n\nAbsenceTypes.attachSchema(AbsenceTypeSchema);\n\nexport default AbsenceTypes;","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst Announcements = new Mongo.Collection('announcements');\n\nAnnouncementsSchema = new SimpleSchema({\n    title: String,\n    detail: String,\n    startDate: Date,\n    endDate: Date,\n    type: String,\n    mandatory: { type: Boolean, defaultValue: false },\n    business: String,\n    readBy: { type: Array, defaultValue: [] },\n    'readBy.$': String,\n    deletedFor: { type: Array, defaultValue: [] },\n    'deletedFor.$': String\n});\n\nAnnouncements.attachSchema(AnnouncementsSchema);\n\nexport default Announcements;","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst BenefitTypes = new Mongo.Collection('benefitTypes');\n\nBenefitTypeSchema = new SimpleSchema({\n    name: String,\n    businessId: String,\n});\n\nBenefitTypes.attachSchema(BenefitTypeSchema);\n\nexport default BenefitTypes;","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst BenefitsInKindTypes = new Mongo.Collection('benefitsInKindTypes');\n\nBenefitInKindSchema = new SimpleSchema({\n    name: String,\n    businessId: String,\n});\n\nBenefitsInKindTypes.attachSchema(BenefitInKindSchema);\n\nexport default BenefitsInKindTypes;","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst Businesses = new Mongo.Collection('businesses');\n\nBusinessSchema = new SimpleSchema({\n    name: String,\n    address: { type: String, optional: true },\n    city: { type: String, optional: true },\n    country: { type: String, optional: true },\n    postcode: { type: String, optional: true },\n    employeesCount: { type: String, allowedValues: ['1-5', '6-10', '11-15', '16-20', '21-25'] },\n    webAddress: { type: String, optional: true },\n    contactName: { type: String, optional: true },\n    email: String,\n    startDate: { type: Date, defaultValue: new Date(0) },\n    endDate: { type: Date, defaultValue: new Date(0) },\n    price: { type: Number, optional: true },\n    paymentFrequency: { type: String, allowedValues: ['per month', 'per year'], optional: true },\n    status: { type: String, allowedValues: ['live', 'expired', 'trial', 'trial_ended'] },\n    bank: { type: Object, optional: true },\n    'bank.name': { type: String, optional: true },\n    'bank.accountNumber': { type: Number, optional: true },\n    'bank.sortCode': { type: String, optional: true },\n    'bank.accountName': { type: String, optional: true },\n    'bank.IBAN': { type: String, optional: true },\n    'bank.swift': { type: String, optional: true },\n    'bank.BIC': { type: String, optional: true },\n    'bank.address': { type: String, optional: true },\n    'bank.city': { type: String, optional: true },\n    'bank.country': { type: String, optional: true },\n    'bank.postcode': { type: String, optional: true }\n});\n\nBusinesses.attachSchema(BusinessSchema);\n\nexport default Businesses;","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst CompanyDetails = new Mongo.Collection('companyDetails');\n\nCompanyDetaislSchema = new SimpleSchema({\n    business: String,\n    holidaysToCarry: Number,\n    monthsBeforeAlerts: Number,\n    defaultCurrency: String,\n    country: String,\n    defaultProbationWeeks: Number,\n    taskAlerts1: Number,\n    taskAlerts2: Number,\n    taskAlerts3: Number\n});\n\nCompanyDetails.attachSchema(CompanyDetaislSchema);\n\nexport default CompanyDetails;","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst ContentPages = new Mongo.Collection('contentPages');\n\nContentPagesSchema = new SimpleSchema({\n    name: String,\n    summary: String,\n    article: String,\n    isActive: Boolean,\n    visibleFor: String,\n    business: String,\n    order: Number,\n});\n\nContentPages.attachSchema(ContentPagesSchema);\n\nexport default ContentPages;","import { Mongo } from 'meteor/mongo';\n\nconst Countries = new Mongo.Collection('countries');\n\nexport default Countries;","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst Currencies = new Mongo.Collection('currencies');\n\nCurrencySchema = new SimpleSchema({\n    name: String,\n    businessId: String,\n});\n\nCurrencies.attachSchema(CurrencySchema);\n\nexport default Currencies;","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst Departments = new Mongo.Collection('departments');\n\nDepartmentSchema = new SimpleSchema({\n    name: String,\n    businessId: String,\n});\n\nDepartments.attachSchema(DepartmentSchema);\n\nexport default Departments;","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst EmploymentTypes = new Mongo.Collection('employmentTypes');\n\nEmploymentTypeSchema = new SimpleSchema({\n    name: String,\n    businessId: String,\n});\n\nEmploymentTypes.attachSchema(EmploymentTypeSchema);\n\nexport default EmploymentTypes;","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\nimport moment from 'moment';\n\nconst Holiday = new Mongo.Collection('holiday');\n\nHolidaySchema = new SimpleSchema({\n    approvedBy: { type: Object, optional: true, defaultValue: null },\n    'approvedBy._id': String,\n    'approvedBy.fullName': String,\n    createdAt: { type: Date, defaultValue: new Date() },\n    cancelledDate: { type: Date, optional: true, defaultValue: null },\n    cancelReason: { type: String, optional: true },\n    employee: Object,\n    'employee._id': String,\n    'employee.fullName': String,\n    startDate: Date,\n    endDate: {\n        type: Date,\n        autoValue: function () {\n            let endDate = this.field('endDate').value;\n\n            return this.isInsert ? moment(endDate).milliseconds(999).seconds(59).minutes(59).hours(23).toDate() : endDate;\n        },\n    },\n    duration: Number,\n    status: { type: String, allowedValues: ['pending', 'approved', 'cancelled'], defaultValue: 'pending' },\n    notes: { type: String, optional: true },\n});\n\nHoliday.attachSchema(HolidaySchema);\n\nexport default Holiday;","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\nimport moment from 'moment';\n\nconst HolidayDates = new Mongo.Collection('holidayDates');\n\nHolidayDatesSchema = new SimpleSchema({\n    name: String,\n    date: { \n        type: Date, \n        autoValue: function () {\n            let date = this.field('date').value;\n\n            return moment(date).milliseconds(0).seconds(0).minutes(0).hours(0).toDate();\n        },\n    },\n    endDate: { type: Date, optional: true },\n    holidayType: { type: String, allowedValues: ['public', 'company', 'blocked'] },\n    isActive: Boolean,\n    businessId: String,\n});\n\nHolidayDates.attachSchema(HolidayDatesSchema);\n\nexport default HolidayDates;","import { Mongo } from 'meteor/mongo';\nimport { LocalStore } from 'meteor/jalik:ufs-local';\nimport { UploadFS } from 'meteor/jalik:ufs';\n\nconst HRDocuments = new Mongo.Collection('hrDocuments');\n\nexport const HRDocumentsStore = new LocalStore({\n    collection: HRDocuments,\n    name: 'hrDocuments',\n    path: process.env.UPLOADFS_STORE_PATH + '/hrDocuments',\n    mode: '0755',\n    writeMode: '0755',\n    permissions: new UploadFS.StorePermissions({\n        insert(userId, doc) {\n            return true;\n        },\n        update(userId, doc) {\n            return true;\n        },\n        remove(userId, doc) {\n            return true;\n        }\n    })\n});\n\nexport default HRDocuments;","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst HRPolicies = new Mongo.Collection('hrPolicies');\n\nHRPoliciesSchema = new SimpleSchema({\n    name: String,\n    summary: String,\n    details: String,\n    isActive: Boolean,\n    access: String,\n    business: String,\n    order: Number,\n});\n\nHRPolicies.attachSchema(HRPoliciesSchema);\n\nexport default HRPolicies;","import { Mongo } from 'meteor/mongo';\nimport { LocalStore } from 'meteor/jalik:ufs-local';\nimport { UploadFS } from 'meteor/jalik:ufs';\n\nconst Images = new Mongo.Collection('images');\n\nexport const ImagesStore = new LocalStore({\n    collection: Images,\n    name: 'images',\n    path: process.env.UPLOADFS_STORE_PATH + '/images',\n    mode: '0755',\n    writeMode: '0755',\n    permissions: new UploadFS.StorePermissions({\n        insert(userId, doc) {\n            return true;\n        },\n        update(userId, doc) {\n            return true;\n        },\n        remove(userId, doc) {\n            return true;\n        }\n    })\n});\n\nexport default Images;","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst ManagerPermissions = new Mongo.Collection('managerPermissions');\n\nManagerPermissionsSchema = new SimpleSchema({\n    jobEdit: Boolean,\n    compensationEdit: Boolean,\n    hrDocumentsEdit: Boolean,\n    jobView: Boolean,\n    compensationView: Boolean,\n    hrDocumentsView: Boolean,\n    businessId: String,\n});\n\nManagerPermissions.attachSchema(ManagerPermissionsSchema);\n\nexport default ManagerPermissions;","import { Mongo } from 'meteor/mongo';\n\nconst Nationalities = new Mongo.Collection('nationalities');\n\nexport default Nationalities;","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst SecretQuestions = new Mongo.Collection('secretQuestions');\n\nSecretQuestionsSchema = new SimpleSchema({\n    text: String,\n    active: { type: Boolean, defaultValue: true },\n    inputType: { type: String, allowedValues: ['text', 'select', 'date'], defaultValue: 'text' },\n});\n\nSecretQuestions.attachSchema(SecretQuestionsSchema);\n\nexport default SecretQuestions;","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst Tasks = new Mongo.Collection('userTasks');\n\nTasksSchema = new SimpleSchema({\n    absence: { type: String, optional: true, defaultValue: null },\n    holiday: { type: String, optional: true, defaultValue: null },\n    createdAt: { type: Date, optional: true, defaultValue: new Date() },\n    expiryDate: { type: Date, optional: true, defaultValue: null },\n    isComplete: { type: Boolean, optional: true, defaultValue: false },\n    taskType: { type: String, allowedValues: ['default', 'self_certification', 'holiday_approval'], defaultValue: 'default' },\n    text: String,\n    users: [String], // array in case it will be possible to assign a task to multiple users\n});\n\nTasks.attachSchema(TasksSchema);\n\nexport default Tasks;","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst Teams = new Mongo.Collection('teams');\n\nTeamSchema = new SimpleSchema({\n    name: String,\n    businessId: String,\n});\n\nTeams.attachSchema(TeamSchema);\n\nexport default Teams;","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst WorkingPatterns = new Mongo.Collection('workingPatterns');\n\nWorkingPatternsSchema = new SimpleSchema({\n    name: String,\n    isActive: Boolean,\n    weekHours: { type: Array, defaultValue: [0, 0, 0, 0, 0, 0, 0] }, // count of working hours for each day of week starting from sunday\n    'weekHours.$': Number,\n    businessId: String,\n});\n\nWorkingPatterns.attachSchema(WorkingPatternsSchema);\n\nexport default WorkingPatterns;","import { Meteor } from 'meteor/meteor';\nimport moment from 'moment';\n\nimport Nationalities from '../collections/nationalities';\nimport Countries from '../collections/countries';\nimport AbsenceTypes from '../collections/absenceTypes';\nimport Teams from '../collections/teams';\nimport Currencies from '../collections/currencies';\nimport EmploymentTypes from '../collections/employmentTypes';\nimport BenefitTypes from '../collections/benefitTypes';\nimport BenefitsInKindTypes from '../collections/benefitsInKindTypes';\nimport Departments from '../collections/departments';\nimport Announcements from '../collections/announcements';\nimport Images from '../collections/images';\nimport ContentPages from '../collections/contentPages';\nimport HRPolicies from '../collections/hrPolicies';\nimport Businesses from '../collections/businesses';\nimport WorkingPatterns from '../collections/workingPatterns';\nimport CompanyDetails from '../collections/companyDetails';\nimport HRDocuments from '../collections/hrDocuments';\nimport PersonalSettings from '../collections/user_info/personalSettings';\nimport Summary from '../collections/user_info/summary';\nimport PersonalInformation from '../collections/user_info/personalInformation';\nimport EmployeeIds from '../collections/user_info/employeeIds';\nimport Education from '../collections/user_info/education';\nimport Job from '../collections/user_info/job';\nimport Salary from '../collections/user_info/compensation/salary';\nimport BonusDetails from '../collections/user_info/compensation/bonusDetails';\nimport BenefitDetails from '../collections/user_info/compensation/benefitDetails';\nimport BenefitsInKind from '../collections/user_info/compensation/benefitsInKind';\nimport BankInfo from '../collections/user_info/bankInfo';\nimport Contact from '../collections/user_info/contact';\nimport Absence from '../collections/absence';\nimport Tasks from '../collections/tasks';\nimport Holiday from '../collections/holiday';\nimport HolidayDates from '../collections/holidayDates';\nimport ManagerPermissions from '../collections/managementRoles';\n\nMeteor.publish('countries.all', () => {\n    return Countries.find();\n});\n\nMeteor.publish('nationalities.all', () => {\n    return Nationalities.find();\n});\n\nMeteor.publish('absenceTypes.all', () => {\n    const { businessId } = Meteor.user().profile\n\n    return AbsenceTypes.find({ businessId });\n});\n\nMeteor.publish('teams.all', () => {\n    const { businessId } = Meteor.user().profile\n\n    return Teams.find({ businessId });\n});\n\nMeteor.publish('currencies.all', () => {\n    const { businessId } = Meteor.user().profile\n\n    return Currencies.find({ businessId });\n});\n\nMeteor.publish('employmentTypes.all', () => {\n    const { businessId } = Meteor.user().profile\n\n    return EmploymentTypes.find({ businessId });\n});\n\nMeteor.publish('benefitTypes.all', () => {\n    const { businessId } = Meteor.user().profile\n\n    return BenefitTypes.find({ businessId });\n});\n\nMeteor.publish('benefitsInKindTypes.all', () => {\n    const { businessId } = Meteor.user().profile\n\n    return BenefitsInKindTypes.find({ businessId });\n})\n\nMeteor.publish('departments.all', () => {\n    const { businessId } = Meteor.user().profile\n\n    return Departments.find({ businessId });\n});\n\nMeteor.publish('announcements.all', () => {\n    const { businessId } = Meteor.user().profile\n\n    return Announcements.find({ business: businessId }, { sort: { startDate: -1 } });\n});\n\nMeteor.publish('announcements.filterDeleted',  userId => {\n    const { businessId } = Meteor.user().profile;\n    return Announcements.find({ \n        deletedFor: { $ne: userId }, \n        business: businessId \n    }, { \n        sort: { startDate: -1 } \n    });\n});\n\nMeteor.publish('announcements.businessId', businessId => {\n    return Announcements.find({ _id: { $in: ['all', businessId] } }, { sort: { startDate: -1 } });\n});\n\nMeteor.publish('images.all', () => {\n    return Images.find();\n});\n\nMeteor.publish('contentPages.all', () => {\n    return ContentPages.find();\n});\n\nMeteor.publish('contentPages.business', () => {\n    const { businessId } = Meteor.user().profile;\n    const visibleFor = Meteor.user().roles[0];\n\n    return ContentPages.find({ business: businessId, visibleFor: { $in: ['all', visibleFor] }, isActive: true }, { sort: { order: 1 } });\n});\n\nMeteor.publish('contentPages.single', ({ business, visibleFor }) => {\n    return ContentPages.find({ business, visibleFor: { $in: ['all', visibleFor] }, isActive: true });\n});\n\nMeteor.publish('hrPolicies.all', () => {\n    return HRPolicies.find();\n});\n\nMeteor.publish('hrPolicies.business', () => {\n    const { businessId } = Meteor.user().profile;\n\n    return HRPolicies.find({ business: businessId , isActive: true }, { sort: { order: 1 } });\n});\n\nMeteor.publish('hrPolicies.single', ({ business, access }) => {\n    return HRPolicies.find({ business, access: { $in: ['all', access] }, isActive: true });\n});\n\nMeteor.publish('businesses.all', () => {\n    return Businesses.find();\n});\n\nMeteor.publish('businesses.dropdown', () => {\n    return Businesses.find({}, { fields: { 'name': 1 } });\n});\n\nMeteor.publish('workingPatterns.all', () => {\n    const { businessId } = Meteor.user().profile;\n\n    return WorkingPatterns.find({ businessId });\n});\n\nMeteor.publish('holidayDates.all', holidayType => {\n    const { businessId } = Meteor.user().profile;\n\n    return HolidayDates.find({ businessId, holidayType });\n});\n\nMeteor.publish('companyDetails.businessId', businessId => {\n    return CompanyDetails.find({ business: businessId });\n});\n\nMeteor.publish('hrDocuments.user', userId => {\n    return HRDocuments.find({ userId }, { fields: { 'name': 1, 'documentType': 1, 'url': 1, 'userId': 1 } });\n});\n\nMeteor.publish('personalSettings.user', userId => {\n    return PersonalSettings.find({ userId });\n});\n\n//TODO\nMeteor.publish('summary.all', function (newUserId) {\n    const { businessId } = Meteor.user().profile;\n\n    var usersInBusiness = Meteor.users.find({ \n        // _id: { $ne: this.userId }, \n        'profile.businessId': businessId \n    }).map(user => user._id);\n\n    return Summary.find({ userId: { $in: usersInBusiness.concat([newUserId]) } });\n});\n\nMeteor.publish('summary.managers', userId => {\n    // const businessId = Meteor.users.findOne({ _id: this.userId }).profile.businessId;\n    const { businessId } = Meteor.user().profile;\n\n    var usersInBusiness = Meteor.users.find({\n        _id: { $ne: userId },\n        'profile.businessId': businessId\n    }).map(user => user._id);\n\n    var managersInBusiness = Job.find({ \n        userId: { $in: usersInBusiness }, \n        isManager: true \n    }).map(job => job.userId);\n\n    console.log(Summary.find({ userId: { $in: managersInBusiness } }, { fields: { 'firstName': 1 } }).count());\n\n    return Summary.find({ userId: { $in: managersInBusiness } }, { fields: { 'firstName': 1 } });\n});\n\nMeteor.publish('summary.user', userId => {\n    return Summary.find({ userId });\n});\n\nMeteor.publish('personalInformation.user', userId => {\n    return [\n        PersonalInformation.find({ userId }),\n        EmployeeIds.find({ userId })\n    ];\n});\n\nMeteor.publish('education.user', userId => {\n    return Education.find({ userId });\n});\n\nMeteor.publish('jobFormDropdowns.businessId', userId => {\n    const { businessId } = Meteor.user().profile;\n    var usersInBusiness = Meteor.users.find({ 'profile.businessId': businessId, _id: { $ne: userId } }).map(user => user._id);\n    var managerIds = Job.find({ isManager: true, userId: { $in: usersInBusiness } }, { fields: { 'userId': 1 } }).map(jobDoc => jobDoc.userId);\n\n    return [\n        EmploymentTypes.find({ businessId }),\n        Departments.find({ businessId }),\n        Teams.find({ businessId }),\n        WorkingPatterns.find({ businessId }),\n        Summary.find({ userId: { $in: managerIds, $ne: userId } }, { fields: { 'firstName': 1, 'surname': 1 } })\n    ];\n});\n\nMeteor.publish('job.user', userId => {\n    return Job.find({ userId });\n});\n\nMeteor.publish('job.business.all', businessId => {\n    return Job.find({}, { fields: { 'userId': 1, 'title': 1 } });\n})\n\nMeteor.publish('compensationFormDropdowns.businessId', businessId => {\n    return [\n        Currencies.find(),\n        BenefitTypes.find(),\n        BenefitsInKindTypes.find()\n    ];\n});\n\nMeteor.publish('compensation.user', userId => {\n    return [\n        Salary.find({ userId }),\n        BonusDetails.find({ userId }),\n        BenefitDetails.find({ userId }),\n        BenefitsInKind.find({ userId })\n    ];\n});\n\nMeteor.publish('bankInfo.user', userId => {\n    return BankInfo.find({ userId });\n});\n\nMeteor.publish('contact.user', userId => {\n    return Contact.find({ userId });\n});\n\nMeteor.publish('summaries.business.all', businessId => {\n    return Summary.find();\n    // return Summary.find({ businessId });\n});\n\nMeteor.publish('absence.all', () => {\n    const { businessId } = Meteor.user().profile;\n    const usersInBusiness = Meteor.users.find({ 'profile.businessId': businessId }).map(user => user._id);\n\n    return Absence.find({ 'employee._id': { $in: usersInBusiness } });\n});\n\nMeteor.publish('tasks.user', function () {\n    return Tasks.find({ users: this.userId, isComplete: false });\n});\n\nMeteor.publish('holidays.user', userId => {\n    var yearStart = moment().milliseconds(0).seconds(0).minutes(0).hours(0).date(1).month(0).toDate();\n    var yearEnd = moment().milliseconds(0).seconds(0).minutes(0).hours(0).date(1).month(0).year(new Date().getFullYear() + 1).toDate();\n\n\n    return Holiday.find({ \n        'employee._id': userId,\n        $or: [\n            { startDate: { $gte: yearStart, $lt: yearEnd } },\n            { endDate: { $gte: yearStart, $lt: yearEnd } },\n        ]\n    });\n});\n\nMeteor.publish('managersTeam', function () {\n    const isManager = Roles.userIsInRole(this.userId, 'manager');\n    const managerId = isManager ? this.userId : Summary.findOne({ _id: this.userId }).manager;\n\n    return Summary.find({ $or: [{ manager: managerId }, { userId: this.userId }] });\n});\n\nMeteor.publish('managerPermissions', function () {\n    const { businessId } = Meteor.user().profile;\n\n    return ManagerPermissions.find({ businessId });\n});","import { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random';\nimport moment from 'moment';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Email } from 'meteor/email';\n\nimport 'isomorphic-fetch';\n\nimport AbsenceTypes from './collections/absenceTypes';\nimport Announcements from './collections/announcements';\nimport Teams from './collections/teams';\nimport Currencies from './collections/currencies';\nimport EmploymentTypes from './collections/employmentTypes';\nimport BenefitTypes from './collections/benefitTypes';\nimport BenefitsInKindTypes from './collections/benefitsInKindTypes';\nimport Departments from './collections/departments';\nimport ContentPages from './collections/contentPages';\nimport HRPolicies from './collections/hrPolicies';\nimport Businesses from './collections/businesses';\nimport WorkingPatterns from './collections/workingPatterns';\nimport CompanyDetails from './collections/companyDetails';\nimport HRDocuments from './collections/hrDocuments';\nimport Images from './collections/images';\nimport PersonalSettings from './collections/user_info/personalSettings';\nimport Summary from './collections/user_info/summary';\nimport EmployeeIds from './collections/user_info/employeeIds';\nimport PersonalInformation from './collections/user_info/personalInformation';\nimport Education from './collections/user_info/education';\nimport Job from './collections/user_info/job';\nimport Salary from './collections/user_info/compensation/salary';\nimport BonusDetails from './collections/user_info/compensation/bonusDetails';\nimport BenefitDetails from './collections/user_info/compensation/benefitDetails';\nimport BenefitsInKind from './collections/user_info/compensation/benefitsInKind';\nimport BankInfo from './collections/user_info/bankInfo';\nimport Contact from './collections/user_info/contact';\nimport Absence from './collections/absence';\nimport Tasks from './collections/tasks';\nimport Holiday from './collections/holiday';\nimport HolidayDates from './collections/holidayDates';\nimport SecretQuestions from './collections/secretQuestions';\n\nimport { getEmployeeId } from '../startup/server/accounts';\nimport ManagerPermissions from './collections/managementRoles';\n\nconst mailjet = Npm.require('node-mailjet').connect('8b5f5108fb9039d9da33570918f67da9', '7e37636c6b839c4855232d0689941858');\n\nconst mongoCallback = (error, result) => {\n    if (error) {\n        console.log(error);\n        if (error.invalidKeys && error.invalidKeys.length) {\n            throw new Meteor.Error(400, 'MISSING_FIELD', error.invalidKeys[0].name);\n        }\n\n        throw error;\n    }\n};\n\nconst sendEmail = ({ to, subject, text = '', html = '', }) => {\n    // try {\n    //     return Email.send({ to, from: 'testchatuser11@gmail.com', subject, text });\n    // } catch (error) {\n    //     console.log(error);\n\n    //     return error;\n    // }\n\n    const request = mailjet.post('send', { 'version': 'v3.1' }).request({\n        'Messages': [{\n            'From': { 'Email': 'testchatuser11@gmail.com', 'Name': 'hr-space' },\n            'To': [{ 'Email': to, 'Name': '' }],\n            'Subject': subject,\n            'TextPart': text,\n            'HTMLPart': html,\n        }],\n    });\n\n    request\n    \n        .then(response => response)\n        \n        .catch(error => { throw error; });\n};\n\nMeteor.methods({\n    'test': () => {\n        // return Random.secret();\n        // const url = Meteor.absoluteUrl();\n\n        // const emailHTML = `\n        //     <p>You've been registered in the hr-space</p>\n        //     <p>Follow this link to complete the registration process:</p>\n        //     <p><a href=\"${url}\">${url}</a>\n        // `;\n\n        // sendEmail({ to: 'petro.tsaruk@gmail.com', subject: 'Welcome to hr-space', html: emailHTML });\n\n        return Meteor.user();\n    },\n    'heartbeat': function () {\n        if (!this.userId) return;\n\n        Meteor.users.update(this.userId, { $set: { heartbeat: Date.now() } });\n    },\n    'absenceTypes.create': absenceType => {\n        const { businessId } = Meteor.user().profile;\n\n        if (AbsenceTypes.find({ type: absenceType.type, businessId: businessId }).count() > 0) {\n            throw new Meteor.Error(400, 'DUPLICATE_DOCUMENT', 'Absence type with this name already exists');\n        }\n\n        absenceType.businessId = businessId;\n\n        AbsenceTypes.insert(absenceType, mongoCallback);\n\n        return 200;\n    },\n    'absenceTypes.update': absenceType => {\n        var { _id, ...updatedAbsenceType } = absenceType;\n\n        AbsenceTypes.update(_id, { $set: { ...updatedAbsenceType } }, mongoCallback);\n\n        return 200;\n    },\n    'absenceTypes.remove': absenceType => {\n        return AbsenceTypes.remove(absenceType);\n    },\n    'teams.create': team => {\n        const { businessId } = Meteor.user().profile;\n\n        if (Teams.find({ name: team.name, businessId: businessId }).count() > 0) {\n            throw new Meteor.Error(400, 'DUPLICATE_DOCUMENT', 'A team with this name already exists');\n        }\n\n        team.businessId = businessId;\n\n        Teams.insert(team, mongoCallback);\n\n        return 200;\n    },\n    'teams.update': team => {\n        var { _id, ...updatedTeam } = team;\n\n        Teams.update(_id, { $set: { ...updatedTeam } }, mongoCallback);\n\n        return 200;\n    },\n    'teams.remove': team => {\n        return Teams.remove(team);\n    },\n    'currencies.create': currency => {\n        const { businessId } = Meteor.user().profile;\n\n        if (Currencies.find({ name: currency.name, businessId: businessId }).count() > 0) {\n            throw new Meteor.Error(400, 'DUPLICATE_DOCUMENT', 'A currency with this name already exists');\n        }\n\n        currency.businessId = businessId;\n\n        Currencies.insert(currency, mongoCallback);\n\n        return 200;\n    },\n    'currencies.update': currency => {\n        var { _id, ...updatedCurrency } = currency;\n\n        Currencies.update(_id, { $set: { ...updatedCurrency } }, mongoCallback);\n\n        return 200;\n    },\n    'currencies.remove': currency => {\n        return Currencies.remove(currency);\n    },\n    'employmentTypes.create': employmentType => {\n        const { businessId } = Meteor.user().profile;\n\n        if (EmploymentTypes.find({ name: employmentType.name, businessId: businessId }).count() > 0) {\n            throw new Meteor.Error(400, 'DUPLICATE_DOCUMENT', 'Employment type with this name already exists');\n        }\n\n        employmentType.businessId = businessId;\n\n        EmploymentTypes.insert(employmentType, mongoCallback);\n\n        return 200;\n    },\n    'employmentTypes.update': employmentType => {\n        var { _id, ...updatedEmploymentType } = employmentType;\n\n        EmploymentTypes.update(_id, { $set: { ...updatedEmploymentType } }, mongoCallback);\n\n        return 200;\n    },\n    'employmentTypes.remove': employmentType => {\n        return EmploymentTypes.remove(employmentType);\n    },\n    'benefitTypes.create': benefitType => {\n        const { businessId } = Meteor.user().profile;\n\n        if (BenefitTypes.find({ name: benefitType.name, businessId: businessId }).count() > 0) {\n            throw new Meteor.Error(400, 'DUPLICATE_DOCUMENT', 'Benefit type with this name already exists');\n        }\n\n        benefitType.businessId = businessId;\n\n        BenefitTypes.insert(benefitType, mongoCallback);\n\n        return 200;\n    },\n    'benefitTypes.update': benefitType => {\n        var { _id, ...updatedBenefitType } = benefitType;\n\n        BenefitTypes.update(_id, { $set: { ...updatedBenefitType } }, mongoCallback);\n\n        return 200;\n    },\n    'benefitTypes.remove': benefitType => {\n        return BenefitTypes.remove(benefitType);\n    },\n    'benefitsInKindTypes.create': benefitInKindType => {\n        const { businessId } = Meteor.user().profile;\n\n        if (BenefitsInKindTypes.find({ name: benefitInKindType.name, businessId: businessId }).count() > 0) {\n            throw new Meteor.Error(400, 'DUPLICATE_DOCUMENT', 'Benefit in kind with this name already exists');\n        }\n\n        benefitInKindType.businessId = businessId;\n\n        BenefitsInKindTypes.insert(benefitInKindType, mongoCallback);\n\n        return 200;\n    },\n    'benefitsInKindTypes.update': benefitInKindType => {\n        var { _id, ...updatedBenefitInKindType } = benefitInKindType;\n\n        BenefitsInKindTypes.update(_id, { $set: { ...updatedBenefitInKindType } }, mongoCallback);\n\n        return 200;\n    },\n    'benefitsInKindTypes.remove': benefitInKindType => {\n        return BenefitsInKindTypes.remove(benefitInKindType);\n    },\n    'departments.create': department => {\n        const { businessId } = Meteor.user().profile;\n\n        if (Departments.find({ name: department.name, businessId: businessId }).count() > 0) {\n            throw new Meteor.Error(400, 'DUPLICATE_DOCUMENT', 'A department with this name already exists');\n        }\n\n        department.businessId = businessId;\n\n        Departments.insert(department, mongoCallback);\n\n        return 200;\n    },\n    'departments.update': department => {\n        var { _id, ...updatedDepartment } = department;\n\n        Departments.update(_id, { $set: { ...updatedDepartment } }, mongoCallback);\n\n        return 200;\n    },\n    'departments.remove': department => {\n        return Departments.remove(department);\n    },\n    'announcements.create': announcement => {\n        var momentStartDate = moment(announcement.startDate),\n            momentEndDate = moment(announcement.endDate);\n\n        if (momentStartDate.isSameOrAfter(momentEndDate)) {\n            throw new Meteor.Error(400, 'DATES_MISMATCH', 'Start date has to be lower than End date');\n        }\n\n        var business = Meteor.user().profile.businessId;\n\n        Announcements.insert({ business, ...announcement }, mongoCallback);\n\n        return 200;\n    },\n    'announcements.update': announcement => {\n        var { _id, ...updatedAnnouncement } = announcement;\n\n        Announcements.update(announcement._id, { $set: { ...updatedAnnouncement } }, mongoCallback);\n\n        return 200;\n    },\n    'announcements.remove': announcement => {\n        return Announcements.remove(announcement);\n    },\n    'announcements.markRead': function (_id) {\n        const userId = this.userId;\n\n        Announcements.update(_id, { $push: { readBy: userId } }, mongoCallback);\n\n        return 200;\n    },\n    'announcements.deleteForUser': function ({ _id, ...announcement }) {\n        const userId = this.userId;\n\n        if (announcement.mandatory && !~announcement.readBy.indexOf(userId)) {\n            throw new Meteor.Error(400, 'MANDATORY_ANNOUNCEMENT', 'This announcement is mandatory to read');\n        } else {\n            Announcements.update(_id, { $push: { deletedFor: userId } }, mongoCallback);\n        }\n\n        return 200;\n    },\n    'contentPages.create': contentPage => {\n        var lastContentPage = ContentPages.findOne({ business: contentPage.business }, { sort: { order: -1 } });\n        var order = lastContentPage ? lastContentPage.order : 0;\n\n        contentPage.order = order + 1;\n        \n        ContentPages.insert(contentPage, mongoCallback);\n        \n        return 200;\n    },\n    'contentPages.update': contentPage => {\n        var { _id, ...updatedContentPage } = contentPage;\n\n        ContentPages.update(_id, { $set: { ...updatedContentPage } }, mongoCallback);\n\n        return 200;\n    },\n    'contentPages.remove': contentPage => {\n        return ContentPages.remove(contentPage);\n    },\n    'contentPages.incrementOrder': contentPage => {\n        var lastContentPage = ContentPages.findOne({ business: contentPage.business }, { sort: { order: -1 } });\n\n        if (lastContentPage._id !== contentPage._id) {\n            ContentPages.update({ business: contentPage.business, order: contentPage.order + 1 }, { $inc: { order: -1 } });\n            ContentPages.update({ _id: contentPage._id }, { $inc: { order: 1 } });\n        }\n\n        return 200;\n    },\n    'contentPages.decrementOrder': contentPage => {\n        if (contentPage.order > 1) {\n            ContentPages.update({ business: contentPage.business, order: contentPage.order - 1 }, { $inc: { order: 1 } });\n            ContentPages.update({ _id: contentPage._id }, { $inc: { order: -1 } });\n        }\n\n        return 200;\n    },\n    'hrPolicies.create': policy => {\n        var lastHrPolicy = HRPolicies.findOne({ business: policy.business }, { sort: { order: -1 } });\n        var order = lastHrPolicy ? lastHrPolicy.order : 0;\n\n        policy.order = order + 1;\n\n        HRPolicies.insert(policy, mongoCallback);\n\n        return 200;\n    },\n    'hrPolicies.update': policy => {\n        var { _id, ...updatedPolicy } = policy;\n\n        HRPolicies.update(_id, { $set: updatedPolicy }, mongoCallback);\n\n        return 200;\n    },\n    'hrPolicies.remove': policy => {\n        return HRPolicies.remove(policy);\n    },\n    'hrPolicies.incrementOrder': policy => {\n        var lastHrPolicy = HRPolicies.findOne({ business: policy.business }, { sort: { order: -1 } });\n\n        if (lastHrPolicy._id !== policy._id) {\n            HRPolicies.update({ business: policy.business, order: policy.order + 1 }, { $inc: { order: -1 } });\n            HRPolicies.update({ _id: policy._id }, { $inc: { order: 1 } });\n        }\n\n        return 200;\n    },\n    'hrPolicies.decrementOrder': policy => {\n        if (policy.order > 1) {\n            HRPolicies.update({ business: policy.business, order: policy.order - 1 }, { $inc: { order: 1 } });\n            HRPolicies.update({ _id: policy._id }, { $inc: { order: -1 } });\n        }\n\n        return 200;\n    },\n    'businesses.create': business => {\n        var momentStartDate = moment(business.startDate),\n            momentEndDate = moment(business.endDate);\n            \n        var emailExists = Meteor.users.findOne({ 'emails.address': business.email });\n        \n        if (emailExists) {\n            throw new Meteor.Error(400, 'EMAIL_ALREADY_EXISTS', 'This email is already taken');\n        }\n        \n        if (momentStartDate.isSameOrAfter(momentEndDate)) {\n            throw new Meteor.Error(400, 'DATES_MISMATCH', 'Start date has to be lower than End date');\n        }\n\n        Businesses.insert(business, (error, response) =>{\n            if (error) {\n                console.log(error);\n                if (error.invalidKeys && error.invalidKeys.length) {\n                    throw new Meteor.Error(400, 'MISSING_FIELD', error.invalidKeys[0].name);\n                }\n        \n                throw error;\n            } else {\n                ['GBP', 'EUR'].forEach(currency => Currencies.insert({ name: currency, businessId: response }));\n                ['Finance', 'IT', 'Admin', 'Marketing', 'Warehouse'].forEach(department => Departments.insert({ name: department, businessId: response }));\n                ['Day shift', 'Night shift', 'Weekend'].forEach(team => Teams.insert({ name: team, businessId: response }));\n                ['Full time', 'Part time', 'Contract'].forEach(type => EmploymentTypes.insert({ name: type, businessId: response }));\n                ['Accommodation', 'Car'].forEach(type => BenefitTypes.insert({ name: type, businessId: response }));\n                \n                console.log('creating user');\n\n                Accounts.createUser({\n                    email: business.email, \n                    password: business.email, \n                    profile: {\n                        businessId: response,\n                        contactName: business.contactName,\n                        role: 'admin'\n                    },\n                });\n            }\n        });\n\n        console.log('before return');\n\n        return 200;\n    },\n    'businesses.update': business => {\n        var { _id, ...updatedBusiness } = business;\n\n        Businesses.update(business._id, { $set: { ...updatedBusiness } }, mongoCallback);\n\n        return 200;\n    },\n    'businesses.remove': business => {\n        return Businesses.remove(business);\n    },\n    'workingPatterns.create': workingPattern => {\n        const { businessId } = Meteor.user().profile;\n\n        workingPattern.businessId = businessId;\n\n        WorkingPatterns.insert(workingPattern, mongoCallback);\n    },\n    'workingPatterns.update': workingPattern => {\n        var { _id, ...updatedWorkingPattern } = workingPattern;\n\n        WorkingPatterns.update(_id, { $set: { ...updatedWorkingPattern } }, mongoCallback);\n\n        return 200;\n    },\n    'workingPatterns.remove': workingPattern => {\n        Job.update({ 'workingPattern._id': workingPattern._id }, { $unset: { workingPattern: 1 } }, (error, result) => {\n            if (error) {\n                throw error;\n            }\n\n            return WorkingPatterns.remove(workingPattern);\n        });\n    },\n    'copyPolicy': ({ policies, business }) => {\n        var lastPolicy = HRPolicies.findOne({ business: policies[0].business }, { sort: { order: -1 } });\n        var order = lastPolicy ? lastPolicy.order : 0;\n\n        policies.forEach(policy => {\n            let { _id, ...tmp } = policy;\n\n            tmp.business = business;\n            tmp.order = ++order;\n\n            HRPolicies.insert(tmp);\n        });\n\n        return 200;\n    },\n    'publicHolidays.create': holiday => {\n        const { businessId } = Meteor.users.findOne({ _id: Meteor.userId() }).profile;\n\n        HolidayDates.insert({ holidayType: 'public', businessId, ...holiday }, mongoCallback);\n\n        return 200;\n    },\n    'publicHolidays.update': holiday => {\n        var { _id, ...updatedHoliday } = holiday;\n\n        HolidayDates.update(_id, { $set: { ...updatedHoliday } }, mongoCallback);\n\n        return 200;\n    },\n    'publicHolidays.remove': holiday => {\n        return HolidayDates.remove(holiday);\n    },\n    'blockedDates.create': date => {\n        const { businessId } = Meteor.users.findOne({ _id: Meteor.userId() }).profile;\n\n        HolidayDates.insert({ holidayType: 'blocked', businessId, ...date }, mongoCallback);\n\n        return 200;\n    },\n    'blockedDates.update': date => {\n        var { _id, ...updatedDate } = date;\n\n        HolidayDates.update(_id, { $set: { ...updatedDate } }, mongoCallback);\n\n        return 200;\n    },\n    'blockedDates.remove': date => {\n        return HolidayDates.remove(date);\n    },\n    'companyHolidays.create': holiday => {\n        const { businessId } = Meteor.users.findOne({ _id: Meteor.userId() }).profile;\n\n        HolidayDates.insert({ holidayType: 'company', businessId, ...holiday }, mongoCallback);\n\n        return 200;\n    },\n    'companyHolidays.update': holiday => {\n        var { _id, ...updatedHoliday } = holiday;\n\n        HolidayDates.update(_id, { $set: { ...updatedHoliday } }, mongoCallback);\n\n        return 200;\n    },\n    'companyHolidays.remove': holiday => {\n        return HolidayDates.remove(holiday);\n    },\n    'companyDetails.create': details => {\n        CompanyDetails.insert(details, mongoCallback);\n\n        return 200;\n    },\n    'companyDetails.update': details => {\n        var { _id, ...updatedDetails } = details;\n\n        CompanyDetails.update(_id, { $set: { ...updatedDetails } }, mongoCallback);\n\n        return 200;\n    },\n    'companyDetails.remove': details => {\n        return CompanyDetails.remove(details);\n    },\n    'hrDocuments.remove': _id => {\n        return HRDocuments.remove({ _id });\n    },\n    'images.remove': ids => {\n        return Images.remove({ _id: { $in: ids } });\n    },\n    'personalSettings.update': settings => {\n        var { _id, ...updatedSettings } = settings;\n\n        PersonalSettings.update(_id, { $set: { ...updatedSettings } }, { upsert: true }, mongoCallback);\n\n        return 200;\n    },\n    'summary.update': summary => {\n        var { _id, ...updatedSummary } = summary;\n\n        console.log(updatedSummary);\n\n        Summary.update(_id, { $set: { ...updatedSummary } }, { upsert: true }, mongoCallback);\n\n        return 200;\n    },\n    'personalInformation.update': personalInformation => {\n        console.log(personalInformation);\n\n        var { _id, ...updatedPersonalInformation } = personalInformation;\n\n        PersonalInformation.update(_id, { $set: { ...updatedPersonalInformation } }, { upsert: true }, mongoCallback);\n\n        return 200;\n    },\n    'employeeIds.remove': _id => {\n        return EmployeeIds.remove({ _id });\n    },\n    'employeeIds.removeMany': ids => {\n        return EmployeeIds.remove({ _id: { $in: ids } });\n    },\n    'generateEmployeeId.business': () => {\n        const businessId = Meteor.user().profile.businessId;\n        \n        return getEmployeeId(businessId);\n    },\n    'createEmployee': summary => {\n        const { businessId } = Meteor.user().profile;\n        const token = Random.secret();\n\n        //this will throw a Meteor.Error if an error occures\n        const userId = Accounts.createUser({ \n            email: summary.email,\n            // password: summary.email, //hardcode, must send verification email instead\n            profile: { \n                role: 'employee', \n                businessId: businessId,\n                contactName: summary.firstName + ' ' + summary.surname,\n                signupToken: token,\n            },\n        });\n\n        const url = Meteor.absoluteUrl() + 'signup/' + token;\n\n        console.log('signup link: ' + url);\n\n        const emailHTML = `\n            <p>You've been registered in the hr-space</p>\n            <p>Follow this link to complete the registration process:</p>\n            <p><a href=\"${url}\">${url}</a>\n        `;\n\n        sendEmail({ to: summary.email, subject: 'Welcome to hr-space', html: emailHTML });\n\n        Summary.update({ userId: userId }, { $set: { ...summary } }, mongoCallback);\n\n        return userId;\n    },\n    'education.submit': educations => {\n        educations.forEach(e => {\n            let { _id, isNew, ...education } = e;\n\n            if (isNew) {\n                Education.insert(education, (error, response) => {\n                    if (error) {\n                        throw error;\n                    }\n                });\n            } else {\n                Education.update(_id, { $set: { ...education } }, (error, response) => {\n                    if (error) {\n                        throw error;\n                    }\n                });\n            }\n        });\n\n        return 200;\n    },\n    'job.update': job => {\n        var { _id, ...updatedJob } = job;\n\n        if (updatedJob.workPermit && (+updatedJob.dateOfExpiry === 0)) {\n            throw new Meteor.Error(400, 'Expiry date for visa or work permission is required');\n        }\n\n        if (updatedJob.startDate >= updatedJob.probationEndDate) {\n            throw new Meteor.Error(400, 'End of probation date cannot be on the same day or before the start date')\n        }\n\n        Job.update(_id, { $set: { ...updatedJob } }, { upsert: true }, (error, response) => {\n            if (error) {\n                throw error;\n            }\n\n            Meteor.users.update(updatedJob.userId, { $set: { roles: [updatedJob.access] } }, (err, res) => {\n                if (err) {\n                    throw err;\n                }\n            });\n        });\n\n        return 200;\n    },\n    'salary.create': salary => {\n        Salary.insert(salary, mongoCallback);\n\n        return 200;\n    },\n    'salary.update': salary => {\n        var { _id, ...updatedSalary } = salary;\n\n        Salary.update(_id, { $set: { ...updatedSalary } }, mongoCallback);\n\n        return 200;\n    },\n    'salary.remove': salary => {\n        return Salary.remove(salary);\n    },\n    'bonusDetails.create': bonusDetails => {\n        BonusDetails.insert(bonusDetails, mongoCallback);\n\n        return 200;\n    },\n    'bonusDetails.update': bonusDetails => {\n        var { _id, ...updatedBonusDetails } = bonusDetails;\n\n        BonusDetails.update(_id, { $set: { ...updatedBonusDetails } }, mongoCallback);\n\n        return 200;\n    },\n    'bonusDetails.remove': bonusDetails => {\n        return BonusDetails.remove(bonusDetails);\n    },\n    'benefitDetails.create': benefitDetail => {\n        var momentStartDate = moment(benefitDetail.startDate),\n            momentEndDate = moment(benefitDetail.endDate);\n\n        if (momentStartDate.isSameOrAfter(momentEndDate)) {\n            throw new Meteor.Error(400, 'DATES_MISMATCH', 'Start date has to be lower than End date');\n        }\n\n        BenefitDetails.insert(benefitDetail, mongoCallback);\n\n        return 200;\n    },\n    'benefitDetails.update': benefitDetail => {\n        var { _id, ...updatedBenefitDetails } = benefitDetail;\n\n        BenefitDetails.update(_id, { $set: { ...updatedBenefitDetails } }, mongoCallback);\n\n        return 200;\n    },\n    'benefitDetails.remove': benefitDetail => {\n        return BenefitDetails.remove(benefitDetail);\n    },\n    'benefitsInKind.create': benefitInKind => {\n        var momentStartDate = moment(benefitInKind.startDate),\n            momentEndDate = moment(benefitInKind.endDate);\n\n        if (momentStartDate.isSameOrAfter(momentEndDate)) {\n            throw new Meteor.Error(400, 'DATES_MISMATCH', 'Start date has to be lower than End date');\n        }\n\n        BenefitsInKind.insert(benefitInKind, mongoCallback);\n\n        return 200;\n    },\n    'benefitsInKind.update': benefitInKind => {\n        var { _id, ...updatedBenefitInKind } = benefitInKind;\n\n        BenefitsInKind.update(_id, { $set: { ...updatedBenefitInKind } }, mongoCallback);\n\n        return 200;\n    },\n    'benefitsInKind.remove': benefitInKind => {\n        return BenefitsInKind.remove(benefitInKind);\n    },\n    'bankInfo.update': bankInfo => {\n        var { _id, ...updatedBankInfo } = bankInfo;\n\n        BankInfo.update(_id, { $set: { ...updatedBankInfo } }, { upsert: true }, mongoCallback);\n\n        return 200;\n    },\n    'contact.submit': contacts => {\n        contacts.forEach(c => {\n            let { _id, isNew, ...contact } = c;\n\n            if (isNew) {\n                Contact.insert(contact, (error, response) => {\n                    if (error) {\n                        throw error;\n                    }\n                });\n            } else {\n                Contact.update(_id, { $set: { ...contact } }, (error, response) => {\n                    if (error) {\n                        throw error;\n                    }\n                });\n            }\n        });\n\n        return 200;\n    },\n    'managers.get': userId => {\n        const { businessId } = Meteor.user().profile;\n\n        var usersInBusiness = Meteor.users.find({\n            _id: { $ne: userId },\n            'profile.businessId': businessId\n        }).map(user => user._id);\n\n        var managersInBusiness = Job.find({\n            userId: { $in: usersInBusiness },\n            isManager: true\n        }).map(job => job.userId);\n\n        var managers = Summary\n            .find({ userId: { $in: managersInBusiness } }, { fields: { 'userId': 1, 'firstName': 1, 'surname': 1 } })\n            .map(summary => ({ _id: summary.userId, name: summary.firstName + ' ' + summary.surname }));\n\n        return managers;\n    },\n    'absence.create': function (absence) {\n        const absences = Absence.find({\n            'employee._id': absence.employee._id,\n            $or: [\n                { \n                    startDate: { \n                        $gte: moment(absence.startDate).hours(0).minutes(0).seconds(0).milliseconds(0).toDate(), \n                        $lte: moment(absence.endDate || absence.startDate).hours(23).minutes(59).seconds(59).milliseconds(999).toDate() \n                    } \n                },\n                { \n                    endDate: { \n                        $gte: moment(absence.startDate).hours(0).minutes(0).seconds(0).milliseconds(0).toDate(), \n                        $lte: moment(absence.endDate || absence.startDate).hours(23).minutes(59).seconds(59).milliseconds(999).toDate() \n                    } \n                },\n            ]\n        }).fetch();\n\n        if (absences.length) {\n            throw new Meteor.Error(403, 'This employee already has an absence in this period');\n        }\n\n        Absence.insert(absence, (error, result) => {\n            if (error) {\n                if (error.invalidKeys && error.invalidKeys.length) {\n                    throw new Meteor.Error(400, 'MISSING_FIELD', error.invalidKeys[0].name);\n                }\n\n                throw error;\n            } else {\n                var requiresSelfCertification = AbsenceTypes.findOne({ _id: absence.absenceType._id }).selfCertification;\n\n                if (requiresSelfCertification) {\n                    const selfCertificationTask = {\n                        absence: result,\n                        taskType: 'self_certification',\n                        text: 'Complete self certification form',\n                        users: [absence.employee._id]\n                    };\n\n                    Tasks.insert(selfCertificationTask);\n\n                    var employeeEmail = Meteor.users.findOne({ _id: absence.employee._id }).emails[0].address;\n\n                    sendEmail({\n                        to: employeeEmail,\n                        subject: 'New task',\n                        text: 'HR has recorded your absence. Please complete the self cerification form. A reminder task was created on the dashboard'\n                    });\n                }\n\n                if (!absence.endDate) {\n                    const hrReminderTask = {\n                        absence: result,\n                        text: `Reminder to complete return to work date when ${absence.employee.fullName} returns to work`,\n                        users: [this.userId]\n                    };\n\n                    Tasks.insert(hrReminderTask);\n\n                    var hrEmail = Meteor.users.findOne({ _id: this.userId }).emails[0].address;\n\n                    sendEmail({\n                        to: hrEmail,\n                        subject: 'New task',\n                        text: `You have recorded an absence for ${absence.employee.fullName}. A reminder task was created on the dashboard`\n                    });\n                }\n            }\n        });\n\n        return 200;\n    },\n    'absence.update': function (absence) {\n        const { _id, ...updatedAbsence } = absence;\n\n        var initialAbsence = Absence.findOne({ _id });\n\n        Absence.update({ _id }, { $set: updatedAbsence }, (error, result) => {\n            if (error) {\n                if (error.invalidKeys && error.invalidKeys.length) {\n                    throw new Meteor.Error(400, 'MISSING_FIELD', error.invalidKeys[0].name);\n                }\n\n                throw error;\n            } else {\n                if (!initialAbsence.endDate && updatedAbsence.endDate) {\n                    Tasks.update({ absence: _id, users: this.userId }, { $set: { isComplete: true } }, (err, res) => {\n                        if (err) throw err;\n                    });\n                }\n            }\n        });\n\n        return 200;\n    },\n    'completeTask': taskId => {\n        Tasks.update({ _id: taskId }, { $set: { isComplete: true } }, (error, result) => {\n            if (error) {\n                throw error;\n            }\n        });\n\n        return 200;\n    },\n    'getTeamAbsence': managerId => {\n        const usersInTeam = Summary.find({ manager: managerId }).map(summary => summary.userId);\n        const sicknessAbsenceTypes = AbsenceTypes.find({ sicknessIdentifier: true }).map(absenceType => absenceType._id);\n        const yearStart = moment().milliseconds(0).seconds(0).minutes(0).hours(0).date(1).month(0).toDate();\n        const yearEnd = moment().milliseconds(0).seconds(0).minutes(0).hours(0).date(1).month(0).year(new Date().getFullYear() + 1).toDate();\n\n        return Absence.find({\n            'employee._id': { $in: usersInTeam },\n            'absenceType._id': { $in: sicknessAbsenceTypes },\n            $or: [\n                { startDate: { $gte: yearStart, $lt: yearEnd } },\n                { endDate: { $gte: yearStart, $lt: yearEnd } },\n            ],\n        }).map(absence => {\n            let totalDays = absence.endDate ?\n                moment(absence.endDate).diff(moment(absence.startDate), 'days') :\n                moment(new Date()).diff(moment(absence.startDate), 'days');\n\n            return {\n                _id: absence._id,\n                employee: absence.employee,\n                startDate: absence.startDate,\n                endDate: absence.endDate,\n                absenceType: absence.absenceType.name,\n                totalDays\n            };\n        });\n    },\n    'getBradfordFactor.userId': userId => {\n        var totalDays = 0;\n        const yearStart = moment().milliseconds(0).seconds(0).minutes(0).hours(0).date(1).month(0).toDate();\n        const yearEnd = moment().milliseconds(0).seconds(0).minutes(0).hours(0).date(1).month(0).year(new Date().getFullYear() + 1).toDate();\n\n        var absences = Absence.find({\n            'employee._id': userId || Meteor.userId(),\n            $or: [\n                { startDate: { $gte: yearStart, $lt: yearEnd } },\n                { endDate: { $gte: yearStart, $lt: yearEnd } },\n            ],\n            endDate: { $nin: [null, new Date(0)] },\n        }).fetch();\n\n        absences = absences.filter(absence => AbsenceTypes.findOne({ _id: absence.absenceType._id }).sicknessIdentifier);\n\n        var absencesCount = absences.length;\n\n        absences.forEach(absence => totalDays += moment(absence.endDate).diff(moment(absence.startDate), 'days'));\n\n        return absencesCount * absencesCount * totalDays;\n    },\n    'getAbsences.filters': filters => {\n        const { businessId } = Meteor.user().profile;\n        const usersInBusiness = Meteor.users.find({ 'profile.businessId': businessId }).map(user => user._id);\n        const holidayDates = HolidayDates.find({ isActive: true, businessId }).fetch();\n\n        var query = {\n            $and: [\n                { 'employee._id': { $in: usersInBusiness } },\n            ],\n        };\n\n        if (filters.team) {\n            let teamUserIds = Job.find({ 'team._id': filters.team._id }).map(job => job.userId);\n\n            query.$and.push({ 'employee._id': { $in: teamUserIds } });\n        }\n\n        if (filters.employee) {\n            query.$and.push({ 'employee._id': filters.employee._id });\n        }\n        if (filters.absenceType) {\n            var typeIds = [];\n\n            if (filters.absenceType === 'Sickness') {\n                typeIds = AbsenceTypes.find({ sicknessIdentifier: true }).map(type => type._id);\n\n                query.$and.push({ 'absenceType._id': { $in: typeIds } });\n\n                return {\n                    // absences: Absence.find(query).fetch(),\n                    absences: Absence.find(query).map(absence => {\n                        const tmp = AbsenceTypes.findOne({ _id: absence.absenceType._id });\n                        \n                        return {\n                            ...absence,\n                            absenceType: {\n                                sicknessIdentifier: tmp.sicknessIdentifier,\n                                ...absence.absenceType,\n                            },\n                        };\n                    }),\n                };\n            } else {\n                return {\n                    absences: Holiday.find({ status: 'approved', ...query }).fetch(),\n                };\n            }\n        } else {\n            return {\n                absences: Absence.find(query).map(absence => {\n                    const tmp = AbsenceTypes.findOne({ _id: absence.absenceType._id });\n                    \n                    return {\n                        ...absence,\n                        absenceType: {\n                            sicknessIdentifier: tmp.sicknessIdentifier,\n                            ...absence.absenceType,\n                        },\n                    };\n                }).concat(Holiday.find({ status: 'approved', ...query }).fetch()),\n                holidayDates: holidayDates,\n            };\n        }\n    },\n    'holiday.create': holiday => {\n        const { businessId } = Meteor.users.findOne({ _id: holiday.employee }).profile;\n        const employeeSummary = Summary.findOne({ userId: holiday.employee });\n        const userJob = Job.findOne({ userId: holiday.employee }, { fields: { annualLeaveEntitlement: 1, workingPattern: 1 } });\n        const workingPattern = WorkingPatterns.findOne({ _id: userJob.workingPattern._id, isActive: true });\n        const holidayDates = HolidayDates.find({\n            businessId,\n            isActive: true,\n            holidayType: { $ne: 'blocked' },\n            date: { $gte: holiday.startDate, $lte: holiday.endDate },\n        }).map(holidayDate => holidayDate.date);\n\n        var duration = 0;\n\n        const isDateWorkingDay = date => {\n            try {\n                holidayDates.forEach(holidayDate => {\n                    if (moment(date).isSame(holidayDate, 'day')) {\n                        throw false;\n                    }\n                });\n            } catch (e) {\n                return e;\n            }\n\n            let dayIndex = date.getDay();\n\n            if (workingPattern && (workingPattern.weekHours[dayIndex] < 1)) {\n                return false;\n            }\n\n            return true;\n        };\n\n        for (let date = new Date(+holiday.startDate); date <= +holiday.endDate; date.setDate(date.getDate() + 1)) {\n            if (isDateWorkingDay(new Date(date))) {\n                duration++;\n            }\n        }\n\n        holiday.duration = duration;\n\n        holiday.employee = {\n            _id: employeeSummary.userId,\n            fullName: employeeSummary.firstName + ' ' + employeeSummary.surname,\n        };\n\n        Holiday.insert(holiday, (error, result) => {\n            if (error) {\n                if (error.invalidKeys && error.invalidKeys.length) {\n                    throw new Meteor.Error(400, 'MISSING_FIELD', error.invalidKeys[0].name);\n                }\n\n                throw error;\n            } else {\n                const managerTask = {\n                    holiday: result,\n                    text: `Holiday Request by ${holiday.employee.fullName} for the days from ${moment(holiday.startDate).format('DD/MM/YYYY')} to ${moment(holiday.endDate).format('DD/MM/YYYY')}`,\n                    taskType: 'holiday_approval',\n                    users: [employeeSummary.manager],\n                };\n\n                Tasks.insert(managerTask);\n\n                var managerEmail = Meteor.users.findOne({ _id: employeeSummary.manager }).emails[0].address;\n\n                sendEmail({\n                    to: managerEmail,\n                    subject: 'New task',\n                    text: `${holiday.employee.fullName} has requested a holiday. You can approve or decline it via a task on the dashboard`,\n                });\n            }\n        });\n\n        return 200;\n    },\n    'holiday.approve': holidayId => {\n        const manager = Summary.findOne({ userId: Meteor.userId() });\n\n        Holiday.update({ _id: holidayId }, {\n            $set: {\n                status: 'approved',\n                approvedBy: { _id: manager._id, fullName: manager.firstName + ' ' + manager.surname }\n            }\n        }, (error, result) => {\n            if (error) throw error;\n\n            Tasks.update({ holiday: holidayId }, { $set: { isComplete: true } }, (err, res) => {\n                if (err) throw err;\n            });\n        });\n\n        return 200;\n    },\n    'holiday.cancel': ({ holidayId, cancelReason }) => {\n        Holiday.update({ _id: holidayId }, { $set: { status: 'cancelled', cancelledDate: new Date(), cancelReason } }, (error, result) => {\n            if (error) throw error;\n\n            Tasks.update({ holiday: holidayId }, { $set: { isComplete: true } }, (err, res) => {\n                if (err) throw err;\n            });\n        });\n\n        return 200;\n    },\n    'getHolidayAllowance.user': userId => {\n        const { businessId } = Meteor.users.findOne({ _id: userId }).profile;\n        const userJob = Job.findOne({ userId }, { fields: { annualLeaveEntitlement: 1, workingPattern: 1 } });\n        const yearStart = moment().milliseconds(0).seconds(0).minutes(0).hours(0).date(1).month(0).toDate();\n        const yearEnd = moment().milliseconds(0).seconds(0).minutes(0).hours(0).date(1).month(0).year(new Date().getFullYear() + 1).toDate();\n\n        const totalHolidayRequested = Holiday.find({\n            'employee._id': userId,\n            status: 'approved',\n            $or: [\n                { startDate: { $gte: yearStart, $lt: yearEnd } },\n                { endDate: { $gte: yearStart, $lt: yearEnd } },\n            ],\n        }).map(holiday => holiday.duration).reduce((a, b) => a + b, 0);\n\n        const holidayDates = HolidayDates.find({\n            businessId,\n            isActive: true,\n            date: { $gte: yearStart, $lt: yearEnd },\n        }).map(holidayDate => ({ date: holidayDate.date, type: holidayDate.holidayType, endDate: holidayDate.endDate }));\n\n        return {\n            annualLeaveEntitlement: userJob.annualLeaveEntitlement,\n            workingPattern: WorkingPatterns.findOne({ _id: userJob.workingPattern && userJob.workingPattern._id, isActive: true }, { fields: { weekHours: 1 } }),\n            holidayDates,\n            totalHolidayRequested,\n        };\n    },\n    'getHolidayAllowanceDashboard.user': userId => {\n        const userJob = Job.findOne({ userId }, { fields: { annualLeaveEntitlement: 1, workingPattern: 1 } });\n        const holidayEntitlement = userJob.annualLeaveEntitlement;\n        const yearStart = moment().milliseconds(0).seconds(0).minutes(0).hours(0).date(1).month(0).toDate();\n        const yearEnd = moment().milliseconds(0).seconds(0).minutes(0).hours(0).date(1).month(0).year(new Date().getFullYear() + 1).toDate();\n\n        const daysTaken = Holiday.find({\n            'employee._id': userId,\n            status: 'approved',\n            $or: [\n                { startDate: { $gte: yearStart, $lt: yearEnd } },\n                { endDate: { $gte: yearStart, $lt: yearEnd } },\n            ],\n        }).map(holiday => holiday.duration).reduce((a, b) => a + b, 0);\n\n        return {\n            holidayEntitlement,\n            daysTaken,\n        };\n    },\n    'getEmployeeName.userId': userId => {\n        const { firstName = '', surname = '' } = Summary.findOne({ userId }, { fields: { firstName: 1, surname: 1 } });\n        const { department = '' } = Job.findOne({ userId }, { fields: { department: 1 } });\n\n        return { firstName, surname, department };\n    },\n    'getEmployeeInfo': function () {\n        const userId = this.userId;\n\n        const userInfo = {\n            position: '',\n            fullName: '',\n            profilePic: '/img/no-avatar.png',\n        };\n\n        const user = Meteor.user();\n\n        if (user) {\n            if (~user.roles.indexOf('super_admin')) {\n                userInfo.position = 'Super admin';\n                userInfo.fullName = user.emails[0].address;\n            } else {\n                const summary = Summary.findOne({ userId }, { fields: { firstName: 1, surname: 1, photo: 1 } });\n\n                userInfo.position = Job.findOne({ userId }, { fields: { title: 1 } }).title || '';\n                userInfo.fullName = summary.firstName + ' ' + summary.surname;\n                userInfo.profilePic = summary.photo || '/img/no-avatar.png';\n            }\n\n            return userInfo;\n        }\n    },\n    'searchEmployees.query': (query = {}) => {\n        const { businessId } = Meteor.user().profile;\n        const queryArr = query.split(' ');\n\n        // convert to array of regular expressions\n        expressions = queryArr\n            .map(item => new RegExp(`\\\\s${item}.*`, 'i')) // if firstname or surname consists of multiple words\n            .concat(queryArr.map(item => new RegExp(`.*${item}.*`, 'i')));\n\n        // add each expression to the query\n        mongoQuery = {\n            businessId,\n            $or: expressions\n                .map(exp => ({ firstName: exp }))\n                .concat(expressions.map(exp => ({ surname: exp }))),\n        };\n\n        return Summary.find(mongoQuery).map(summary => {\n            const job = Job.findOne({ userId: summary.userId });\n\n            return {\n                _id: summary.userId,\n                fullName: summary.firstName + ' ' + summary.surname,\n                bio: summary.bio,\n                photo: summary.photo,\n                telephone: summary.telephone,\n                email: summary.email,\n                location: summary.location,\n                jobTitle: job ? job.title : 'No job title provided',\n            };\n        });\n    },\n    'subordinates.get': userId => {\n        return Summary.find({ manager: userId }).map(summary => {\n            const job = Job.findOne({ userId: summary.userId });\n\n            return {\n                _id: summary.userId,\n                fullName: summary.firstName + ' ' + summary.surname,\n                bio: summary.bio,\n                photo: summary.photo,\n                telephone: summary.telephone,\n                email: summary.email,\n                location: summary.location,\n                jobTitle: job ? job.title : 'No job title provided',\n            };\n        });\n    },\n    'getQuestions': () => {\n        return SecretQuestions.find({}, { fields: { active: 0 } }).fetch();\n    },\n    'getRandomQuestions.token': ({ token }) => {\n        if (!token) {\n            throw new Meteor.Error(400, 'No token provided');\n        }\n\n        var userSecretQuestions = Meteor.users.findOne({ 'profile.resetPasswordToken': token }).profile.secretQuestions.map(question => question.questionId);\n        var questions = SecretQuestions.find({ _id: { $in: userSecretQuestions } }, { fields: { active: 0 } }).fetch();\n        var response = [];\n\n        for (let i = 0; i < 3; i++) {\n            let randomIndex = Math.floor(Math.random() * questions.length);\n\n            response.push(questions[randomIndex]);\n\n            questions.splice(randomIndex, 1);\n        }\n\n        return response;\n    },\n    'completeSignup': ({ token, password, secretQuestions }) => {\n        if (!token) {\n            throw new Meteor.Error(400, 'No token provided');\n        }\n\n        const user = Meteor.users.findOne({ 'profile.signupToken': token });\n\n        Meteor.users.update({ _id: user._id }, { $set: { 'profile.secretQuestions': secretQuestions }, $unset: { 'profile.signupToken': '' } });\n\n        Accounts.setPassword(user._id, password);\n\n        return { email: user.emails[0].address };\n    },\n    'sendResetPasswordLink': email => {\n        const user = Meteor.users.findOne({ 'emails.address': email });\n\n        if (!user) throw new Meteor.Error(400, 'User not found', 'USER_NOT_FOUND');\n\n        const token = Random.secret();\n        const url = Meteor.absoluteUrl() + 'reset_password/' + token;\n\n        Meteor.users.update({ _id: user._id }, { $set: { 'profile.resetPasswordToken': token } });\n\n        const emailHtml = `\n            <p>To reset your password follow this link:</p>\n            <p><a href=${url}>${url}</a></p>\n        `;\n\n        console.log('reset password link: ' + url);\n\n        sendEmail({ to: email, subject: 'Reset password email', html: emailHtml });\n\n        return 200;\n    },\n    'resetEmployeePassword': ({ token, newPassword, questions }) => {\n        const user = Meteor.users.findOne({ 'profile.resetPasswordToken': token });\n\n        // at least 8 characters, at least 1 uppercase letter, 1 lowercase letter, and 1 number, can contain special characters\n        const regex = new RegExp(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/);\n\n        if (!regex.test(newPassword)) {\n            throw new Meteor.Error(400, 'Password must be at least 8 characters, contain at least 1 uppercase letter, 1 lowercase letter and 1 number');\n        }\n\n        const { secretQuestions = [] } = user.profile;\n\n        for (let question of questions) {\n            for (let userQuestion of secretQuestions) {\n                if ((userQuestion.questionId === question.questionId) && (userQuestion.answer.toLowerCase().trim() !== question.answer.toLowerCase().trim())) {\n                    throw new Meteor.Error(400, 'INVALID_ANSWER', question.questionId);\n                }\n            }\n        }\n\n        Accounts.setPassword(user._id, newPassword);\n\n        Meteor.users.update({ _id: user._id }, { $unset: { 'profile.resetPasswordToken': '' } });\n\n        return 200;\n    },\n    'getHolidayNotes': holidayId => {\n        const { notes } = Holiday.findOne({ _id: holidayId });\n\n        return notes;\n    },\n    'managerPermissions.create': function (managerPermissions) {\n        const { businessId } = Meteor.users.findOne({ userId: this.userId }).profile;\n\n        ManagerPermissions.insert({ businessId, ...managerPermissions });\n\n        return 200;\n    },\n    'managerPermissions.update': function (managerPermissions) {\n        const { businessId } = Meteor.user().profile;\n\n        ManagerPermissions.update({ businessId }, { $set: { ...managerPermissions } });\n\n        return 200;\n    },\n});","// Import modules used by both client and server through a single index entry point\n// e.g. useraccounts configuration file.\n","import { Accounts } from 'meteor/accounts-base';\nimport PersonalSettings from '../../api/collections/user_info/personalSettings';\nimport Summary from '../../api/collections/user_info/summary';\nimport PersonalInformation from '../../api/collections/user_info/personalInformation';\nimport Job from '../../api/collections/user_info/job';\nimport BankInfo from '../../api/collections/user_info/bankInfo';\nimport Contact from '../../api/collections/user_info/contact';\n\nAccounts.onCreateUser((options, user) => {\n    const { role = 'employee', contactName, ...profile } = options.profile;\n\n    user.profile = profile;\n    user.roles = [role];\n\n    if (role !== 'super_admin') {\n        user.profile.personalSettings = PersonalSettings.insert({ userId: user._id });\n\n        user.profile.summary = Summary.insert({ \n            userId: user._id, \n            employeeId: getEmployeeId(profile.businessId),\n            email: options.email,\n            firstName: contactName && contactName.split(' ')[0],\n            surname: contactName && contactName.split(' ')[1],\n            businessId: profile.businessId,\n        });\n        // }, (err, res) => console.log('summary.insert err res:', err, res));\n\n        user.profile.personalInformation = PersonalInformation.insert({ userId: user._id, businessId: profile.businessId });\n\n        user.profile.job = Job.insert({ userId: user._id, access: role, businessId: profile.businessId });\n\n        user.profile.bankInfo = BankInfo.insert({ userId: user._id, businessId: profile.businessId });\n\n        user.profile.contact = Contact.insert({ userId: user._id, businessId: profile.businessId });\n    }\n\n    return user;\n});\n\nexport function getEmployeeId(businessId) {\n    var employeesCount = Meteor.users.find({ 'profile.businessId': businessId }).count();\n\n    if (!employeesCount) return '000001';\n\n    // var lastEmployeeId = employeesCount.employeeId;\n    // var increment = (+lastEmployeeId) + 1;\n    var increment = employeesCount + 1;\n    var employeeId = ('000000' + increment).slice(-6);\n\n    return employeeId;\n};","import Nationalities from '../../api/collections/nationalities';\nimport Countries from '../../api/collections/countries';\nimport Currencies from '../../api/collections/currencies';\nimport Departments from '../../api/collections/departments';\nimport Teams from '../../api/collections/teams';\nimport EmploymentTypes from '../../api/collections/employmentTypes';\nimport BenefitTypes from '../../api/collections/benefitTypes';\nimport SecretQuestions from '../../api/collections/secretQuestions';\n\nif (Countries.find().count() === 0) {\n    const countries = ['Gibraltar', 'United Kingdom', 'Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola', 'Anguilla', 'Antigua & Barbuda', 'Argentina', 'Armenia', 'Aruba', 'Australia', 'Austria', 'Azerbaijan', 'Bahamas', 'Bahrain', 'Bangladesh', 'Barbados', 'Belarus', 'Belgium', 'Belize', 'Benin', 'Bermuda', 'Bhutan', 'Bolivia', 'Bosnia & Herzegovina', 'Botswana', 'Brazil', 'British Virgin Islands', 'Brunei', 'Bulgaria', 'Burkina Faso', 'Burundi', 'Cambodia', 'Cameroon', 'Cape Verde', 'Cayman Islands', 'Chad', 'Chile', 'China', 'Colombia', 'Congo', 'Cook Islands', 'Costa Rica', 'Cote D Ivoire', 'Croatia', 'Cruise Ship', 'Cuba', 'Cyprus', 'Czech Republic', 'Denmark', 'Djibouti', 'Dominica', 'Dominican Republic', 'Ecuador', 'Egypt', 'El Salvador', 'Equatorial Guinea', 'Estonia', 'Ethiopia', 'Falkland Islands', 'Faroe Islands', 'Fiji', 'Finland', 'France', 'French Polynesia', 'French West Indies', 'Gabon', 'Gambia', 'Georgia', 'Germany', 'Ghana', 'Greece', 'Greenland', 'Grenada', 'Guam', 'Guatemala', 'Guernsey', 'Guinea', 'Guinea Bissau', 'Guyana', 'Haiti', 'Honduras', 'Hong Kong', 'Hungary', 'Iceland', 'India', 'Indonesia', 'Iran', 'Iraq', 'Ireland', 'Isle of Man', 'Israel', 'Italy', 'Jamaica', 'Japan', 'Jersey', 'Jordan', 'Kazakhstan', 'Kenya', 'Kuwait', 'Kyrgyz Republic', 'Laos', 'Latvia', 'Lebanon', 'Lesotho', 'Liberia', 'Libya', 'Liechtenstein', 'Lithuania', 'Luxembourg', 'Macau', 'Macedonia', 'Madagascar', 'Malawi', 'Malaysia', 'Maldives', 'Mali', 'Malta', 'Mauritania', 'Mauritius', 'Mexico', 'Moldova', 'Monaco', 'Mongolia', 'Montenegro', 'Montserrat', 'Morocco', 'Mozambique', 'Namibia', 'Nepal', 'Netherlands', 'Netherlands Antilles', 'New Caledonia', 'New Zealand', 'Nicaragua', 'Niger', 'Nigeria', 'Norway', 'Oman', 'Pakistan', 'Palestine', 'Panama', 'Papua New Guinea', 'Paraguay', 'Peru', 'Philippines', 'Poland', 'Portugal', 'Puerto Rico', 'Qatar', 'Reunion', 'Romania', 'Russia', 'Rwanda', 'Saint Pierre & Miquelon', 'Samoa', 'San Marino', 'Satellite', 'Saudi Arabia', 'Senegal', 'Serbia', 'Seychelles', 'Sierra Leone', 'Singapore', 'Slovakia', 'Slovenia', 'South Africa', 'South Korea', 'Spain', 'Sri Lanka', 'St Kitts & Nevis', 'St Lucia', 'St Vincent', 'St. Lucia', 'Sudan', 'Suriname', 'Swaziland', 'Sweden', 'Switzerland', 'Syria', 'Taiwan', 'Tajikistan', 'Tanzania', 'Thailand', 'Timor L\\'Este', 'Togo', 'Tonga', 'Trinidad & Tobago', 'Tunisia', 'Turkey', 'Turkmenistan', 'Turks & Caicos', 'Uganda', 'Ukraine', 'United Arab Emirates', 'Uruguay', 'Uzbekistan', 'Venezuela', 'Vietnam', 'Virgin Islands(US)', 'Yemen', 'Zambia', 'Zimbabwe'];\n\n    countries.forEach(country => Countries.insert({ name: country }));\n}\n\nif (Nationalities.find().count() === 0) {\n    const nationalities = ['Gibraltarian', 'British', 'Afghan', 'Albanian', 'Algerian', 'American', 'Andorran', 'Angolan', 'Antiguans', 'Argentinean', 'Armenian', 'Australian', 'Austrian', 'Azerbaijani', 'Bahamian', 'Bahraini', 'Bangladeshi', 'Barbadian', 'Barbudans', 'Batswana', 'Belarusian', 'Belgian', 'Belizean', 'Beninese', 'Bhutanese', 'Bolivian', 'Bosnian', 'Brazilian', 'Bruneian', 'Bulgarian', 'Burkinabe', 'Burmese', 'Burundian', 'Cambodian', 'Cameroonian', 'Canadian', 'Cape Verdean', 'Central African', 'Chadian', 'Chilean', 'Chinese', 'Colombian', 'Comoran', 'Congolese', 'Costa Rican', 'Croatian', 'Cuban', 'Cypriot', 'Czech', 'Danish', 'Djibouti', 'Dominican', 'Dutch', 'East Timorese', 'Ecuadorean', 'Egyptian', 'Emirian', 'Equatorial Guinean', 'Eritrean', 'Estonian', 'Ethiopian', 'Fijian', 'Filipino', 'Finnish', 'French', 'Gabonese', 'Gambian', 'Georgian', 'German', 'Ghanaian', 'Greek', 'Grenadian', 'Guatemalan', 'Guinea-Bissauan', 'Guinean', 'Guyanese', 'Haitian', 'Herzegovinian', 'Honduran', 'Hungarian', 'I-Kiribati', 'Icelander', 'Indian', 'Indonesian', 'Iranian', 'Iraqi', 'Irish', 'Israeli', 'Italian', 'Ivorian', 'Jamaican', 'Japanese', 'Jordanian', 'Kazakhstani', 'Kenyan', 'Kittian and Nevisian', 'Kuwaiti', 'Kyrgyz', 'Laotian', 'Latvian', 'Lebanese', 'Liberian', 'Libyan', 'Liechtensteiner', 'Lithuanian', 'Luxembourger', 'Macedonian', 'Malagasy', 'Malawian', 'Malaysian', 'Maldivan', 'Malian', 'Maltese', 'Marshallese', 'Mauritanian', 'Mauritian', 'Mexican', 'Micronesian', 'Moldovan', 'Monacan', 'Mongolian', 'Moroccan', 'Mosotho', 'Motswana', 'Mozambican', 'Namibian', 'Nauruan', 'Nepalese', 'New Zealander', 'Nicaraguan', 'Nigerian', 'Nigerien', 'North Korean', 'Northern Irish', 'Norwegian', 'Omani', 'Pakistani', 'Palauan', 'Panamanian', 'Papua New Guinean', 'Paraguayan', 'Peruvian', 'Polish', 'Portuguese', 'Qatari', 'Romanian', 'Russian', 'Rwandan', 'Saint Lucian', 'Salvadoran', 'Samoan', 'San Marinese', 'Sao Tomean', 'Saudi', 'Scottish', 'Senegalese', 'Serbian', 'Seychellois', 'Sierra Leonean', 'Singaporean', 'Slovakian', 'Slovenian', 'Solomon Islander', 'Somali', 'South African', 'South Korean', 'Spanish', 'Sri Lankan', 'Sudanese', 'Surinamer', 'Swazi', 'Swedish', 'Swiss', 'Syrian', 'Taiwanese', 'Tajik', 'Tanzanian', 'Thai', 'Togolese', 'Tongan', 'Trinidadian/Tobagonian', 'Tunisian', 'Turkish', 'Tuvaluan', 'Ugandan', 'Ukrainian', 'Uruguayan', 'Uzbekistani', 'Venezuelan', 'Vietnamese', 'Welsh', 'Yemenite', 'Zambian', 'Zimbabwean'];\n\n    nationalities.forEach(nationality => Nationalities.insert({ name: nationality }));\n}\n\nif (SecretQuestions.find().count() === 0) {\n    const questions = [\n        { text: 'What was the first school you attended?' },\n        { text: 'What was the colour and mark of your first car?' },\n        { text: 'What month was your mother born?', inputType: 'select' },\n        { text: 'What month was your father born?', inputType: 'select' },\n        { text: 'What was the name of your first pet?' },\n    ];\n\n    questions.forEach(question => SecretQuestions.insert(question));\n}\n\nconst roles = Roles.getAllRoles().fetch().map(role => role.name);\n\n['employee', 'manager', 'hr', 'admin', 'super_admin'].forEach(role => {\n    if (!~roles.indexOf(role)) {\n        Roles.createRole(role);\n    }\n});","// Import server startup through a single index entry point\nimport { Meteor } from 'meteor/meteor';\nimport { UploadFS } from 'meteor/jalik:ufs';\n\nMeteor.startup(() => {\n    import './accounts.js';\n    import './fixtures.js';\n    import './register-api.js';\n\n    var sessionPurgeInterval = 1 * 60 * 1000; // 1 min\n    var inactivityTimeout = 15 * 60 * 1000; // 15 mins\n\n    Meteor.setInterval(() => {\n        var now = Date.now();\n        var overdueTimestamp = now - inactivityTimeout;\n\n        Meteor.users.update({\n            heartbeat: { $lt: overdueTimestamp },\n        }, {\n            $set: { 'services.resume.loginTokens': [] },\n            $unset: { heartbeat: 1 }\n        }, { multi: true });\n    }, sessionPurgeInterval);\n\n    UploadFS.config.storesPath = 'uploads';\n});","// Register your apis here\n\nimport '../../api/methods.js';\nimport '../../api/server/publications.js';\n","// Server entry point, imports all server code\n\nimport '/imports/startup/server';\nimport '/imports/startup/both';\n"]}